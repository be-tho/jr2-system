<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Storage;
use App\Models\User;

class CleanupOrphanedImages extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'images:cleanup-profile {--dry-run : Mostrar qu√© se eliminar√≠a sin ejecutar}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Limpiar im√°genes de perfil hu√©rfanas del storage';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $isDryRun = $this->option('dry-run');
        
        if ($isDryRun) {
            $this->info('üîç Modo de simulaci√≥n - No se eliminar√°n archivos');
        }
        
        $this->info('üßπ Iniciando limpieza de im√°genes de perfil hu√©rfanas...');
        
        // Obtener todas las im√°genes en el storage
        $storageImages = Storage::disk('public')->files('profile-images');
        $this->info('üìÅ Im√°genes encontradas en storage: ' . count($storageImages));
        
        // Obtener im√°genes referenciadas en la base de datos
        $dbImages = User::whereNotNull('profile_image')
            ->where('profile_image', '!=', 'usuario.jpg')
            ->pluck('profile_image')
            ->toArray();
        
        $this->info('üíæ Im√°genes referenciadas en BD: ' . count($dbImages));
        
        // Encontrar im√°genes hu√©rfanas
        $orphanedImages = [];
        foreach ($storageImages as $storageImage) {
            $filename = basename($storageImage);
            if (!in_array($filename, $dbImages) && $filename !== 'usuario.jpg') {
                $orphanedImages[] = $storageImage;
            }
        }
        
        if (empty($orphanedImages)) {
            $this->info('‚úÖ No se encontraron im√°genes hu√©rfanas');
            return 0;
        }
        
        $this->warn('‚ö†Ô∏è  Im√°genes hu√©rfanas encontradas: ' . count($orphanedImages));
        
        foreach ($orphanedImages as $image) {
            $this->line('  - ' . basename($image));
        }
        
        if ($isDryRun) {
            $this->info('üîç Simulaci√≥n completada. Ejecuta sin --dry-run para eliminar archivos.');
            return 0;
        }
        
        if ($this->confirm('¬øDeseas eliminar estas im√°genes hu√©rfanas?')) {
            $deletedCount = 0;
            foreach ($orphanedImages as $image) {
                try {
                    Storage::disk('public')->delete($image);
                    $deletedCount++;
                    $this->line('üóëÔ∏è  Eliminada: ' . basename($image));
                } catch (\Exception $e) {
                    $this->error('‚ùå Error al eliminar ' . basename($image) . ': ' . $e->getMessage());
                }
            }
            
            $this->info("‚úÖ Limpieza completada. Se eliminaron {$deletedCount} im√°genes.");
        } else {
            $this->info('‚ùå Operaci√≥n cancelada por el usuario.');
        }
        
        return 0;
    }
}
